package net.codejava.ws;

import java.util.ArrayList;
import java.util.List;

public class CompteDAO {
	// Utilisation du design pattern Singleton
	private static CompteDAO instance = null;
	
	private CompteDAO() {}
	
	// Constructeur pour le CompteDAO
	public static CompteDAO getInstance() {
		if (instance==null) {
			instance = new CompteDAO();
		}
		
		return instance;
	}
	
	// On va créer une variable compatible avec le système multi thread
	private static long m_long_dernierNumeroCompte = 0;
	
	// On crée une liste de stockage pour tous les comptes (dans la mémoire)
	private ArrayList<Compte> m_ArrayList_listeComptes = null;
	
	public BanqueService() {
		// On initialise la liste des comptes 
		m_ArrayList_listeComptes = new ArrayList<Compte>();
	}
	
	// Methode Web Service pour créer un compte
	// On peut spécifier le nom de la méthode du webservice avec "operationName"
	@WebMethod(operationName="CreateBankAccount")
	// On utilise l'annotation WebParam pour définir le nom du paramètre dans le webservice
	// On se positionne dans le mode synchronized pour ne pas avoir des doublons dans les numéros de compte
	synchronized public long createAccount(@WebParam(name="montant")double i_dbl_montantInitial) {
		// Attention, on doit générer un nouveau numéro de compte absolument unique !
		// On a besoin d'un nouveau numéro de compte
		m_long_dernierNumeroCompte++;
			
		// On crée une instance de compte en mémoire
		Compte l_Compte_elementGenere = new Compte(
				/* LONG NUMERO DU COMPTE 	*/ m_long_dernierNumeroCompte, 
				/* DBL SOLDE DU COMPTE		*/ i_dbl_montantInitial, 
				/* DATE DE CREATION COMPTE	*/ new Date()
				);
		
		// On mémorise le compte dans la liste
		get_ArrayList_stockageCompte().add(l_Compte_elementGenere);
		
		// On prépare la valeur en sortie (numéro de compte) qui correspond au dernier élément inséré
		long o_long_numeroDeCompte = l_Compte_elementGenere.get_long_code();

		// On retourne le numéro de compte
		return o_long_numeroDeCompte;
	}
	
	// Methode Web Service pour récupérer le solde d'un compte
	@WebMethod(operationName="GetAccountBalance")
	// On utilise l'annotation WebParam pour définir le nom du paramètre dans le webservice
	public double getSolde(@WebParam(name="code")long i_long_code) {
		// On récupère en premier lieu le compte
		Compte l_ref_Compte = getCompte(i_long_code);
		
		// On récupère le solde du compte
		double o_dbl_solde = l_ref_Compte.get_dbl_solde();
		
		// On retourne le solde du compte
		return o_dbl_solde;
	}
	
	@WebMethod(operationName="GetBankAccount")
	// Methode Web Service pour récupérer un seul compte
	public Compte getCompte(@WebParam(name="code")long i_long_codeRecherche) {	
		// On déclare la variable en sortie initialement à null
		Compte o_Compte_compte = null;
		
		// On parcourant toute la liste manuellement pour le moment
		for (Compte l_Compte_elementParcouru : get_ArrayList_stockageCompte()) {		
			// On récupère le code du compte parcouru dans la liste
			long l_long_codeElementParcouru = l_Compte_elementParcouru.get_long_code();
			
			// Si le code est exactement celui recherché
			if (l_long_codeElementParcouru==i_long_codeRecherche) {
				// On mémorise dans la variable en sortie
				o_Compte_compte = l_Compte_elementParcouru;
				
				// On demande d'arrêter la boucle car on a trouvé l'élément recherché
				break;
			}			
		}
		
		// Si on n'a trouvé aucun élément on lance une exception 
		if (o_Compte_compte==null) {
			throw new WebServiceException("Error");
		}
		
		// Si on arrive ici, on retourne le compte trouvé
		return o_Compte_compte;
	}
	
	// Methode pour récupérer les comptes
	@WebMethod(operationName="GetAllBankAccounts")
	public List<Compte> getComptes() {
		// On retourne directement la liste de stockage des comptes
		return get_ArrayList_stockageCompte();
	}
	
	// Methode interne au programme pour récupérer la liste des comptes
	private ArrayList<Compte> get_ArrayList_stockageCompte() {
		return m_ArrayList_listeComptes;
	}
}
